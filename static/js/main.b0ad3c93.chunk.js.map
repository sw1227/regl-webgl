{"version":3,"sources":["resources/starry_night.jpg","views/Sample.js","common.js","views/Particle.js","views/Kuramoto.js","views/Life.js","views/ReduceSample.js","views/VectorField.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Sample","regl","createRegl","drawTriangle","frag","vert","attributes","position","uniforms","color","prop","count","useEffect","frame","time","clear","depth","Math","cos","sin","destroy","useAsyncEffect","asyncFunc","deps","cleanup","a","fetchShaderText","path","fetch","response","text","loadImage","imageSource","Promise","resolve","reject","image","Image","crossOrigin","src","onload","createImageBitmap","bitmap","gpuReduceCreate","texture","op","reducePass","tex","rcpDim","framebuffer","dim","width","buffers","push","height","i","length","inTex","outFbo","result","read","SHADER_PATH","Particle","a_pos","screenState","Array","fill","map","radius","data","depthStencil","initialParticleState","from","numParticles","floor","random","particleState","fadeCommand","u_screen","u_opacity","particleCommand","a_index","particleRes","keys","u_particles","u_particles_res","primitive","updateCommand","tick","drawFadedTexture","drawParticles","updateParticles","viewportWidth","viewportHeight","forEach","screen","resize","use","opacity","particle","Kuramoto","initialState","state","quadCommand","prevState","k","omega","update","drawQuad","Life","enable","updateLife","View","useState","messages","setMessages","canvas","document","body","appendChild","createElement","textureData","d","gpuReduce","b","max","r","j","total","t0","performance","now","totalStr","round","old","style","padding","m","key","VectorField","draw","starryNight","App","to","AppRouter","exact","component","Reduce","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b0ad3c93.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/starry_night.e856b9af.jpg\";","import React, { useEffect } from \"react\";\nimport createRegl from \"regl\";\n\n\nconst Sample = () => {\n  const regl = createRegl(); // No arguments: create a full screen canvas\n\n  const drawTriangle = regl({\n    frag: `\n    precision mediump float;\n    uniform vec4 color;\n    void main() {\n      gl_FragColor = color;\n    }`,\n\n    vert: `\n    precision mediump float;\n    attribute vec2 position;\n    void main() {\n      gl_Position = vec4(position, 0, 1);\n    }`,\n\n    attributes: {\n      position: [[0, -1], [-1, 0.5], [1, 1]] // No need to flatten\n    },\n\n    uniforms: {\n      color: regl.prop(\"color\")\n    },\n    // Number of vertices to draw in this command\n    count: 3\n  });\n\n  useEffect(() => {\n    regl.frame(({ time }) => {\n      regl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1\n      });\n      drawTriangle({\n        color: [\n          Math.cos(time * 1.0),\n          Math.sin(time * 0.8),\n          Math.cos(time * 3.0),\n          1\n        ]\n      });\n    });\n\n    return () => { regl.destroy() }; // Clean up when unmounted\n  }, []);\n\n  return <></>;\n};\n\n\nexport default Sample;\n","import { useEffect } from \"react\";\n\n\nexport function useAsyncEffect(asyncFunc, deps, cleanup=() => {}) {\n  useEffect(() => {\n    (async () => {\n      asyncFunc();\n    })();\n    return cleanup;\n  }, deps);\n}\n\n\n// Fetch shader code as string\nexport async function fetchShaderText(path) {\n  const response = await fetch(path);\n  const text = await response.text();\n  return text;\n};\n\n\n// Load image bitmap for texture\nexport function loadImage(imageSource) {\n  return new Promise((resolve, reject) => {\n    const image = new Image();\n    image.crossOrigin = \"anonymous\";\n    image.src = imageSource;\n    image.onload = async () => {\n      const bitmap = await createImageBitmap(image);\n      resolve(bitmap);\n    };\n  });\n};\n\n\n// Reduction on the GPU\n// https://github.com/regl-project/regl/blob/gh-pages/example/reduction.js\nexport function gpuReduceCreate(regl, texture, op) {\n  // A single reduce pass: reduces \"tex\" to the half size framebuffer by \"op\"\n  const reducePass = regl({\n    frag: `\n    precision mediump float;\n    uniform sampler2D tex;\n    varying vec2 uv;\n    uniform float rcpDim;\n    float op(float a, float b) {\n      return ${op};\n    }\n    void main () {\n      float a = texture2D(tex, uv - vec2(0.0, 0.0) * rcpDim).x;\n      float b = texture2D(tex, uv - vec2(1.0, 0.0) * rcpDim).x;\n      float c = texture2D(tex, uv - vec2(0.0, 1.0) * rcpDim).x;\n      float d = texture2D(tex, uv - vec2(1.0, 1.0) * rcpDim).x;\n      float result = op(op(a, b), op(c, d));\n      gl_FragColor = vec4(result);\n    }`,\n\n    vert: `\n    precision mediump float;\n    attribute vec2 position;\n    varying vec2 uv;\n    void main () {\n      uv = position;\n      gl_Position = vec4(1.0 - 2.0 * position, 0, 1);\n    }`,\n\n    attributes: {\n      position: [-2, 0, 0, -2, 2, 2] // Large-enough triangle\n    },\n\n    uniforms: {\n      tex: regl.prop(\"inTex\"),\n      rcpDim: regl.prop(\"rcpDim\") // reciprocal texture dimensions.\n    },\n\n    framebuffer: regl.prop(\"outFbo\"),\n\n    count: 3\n  });\n\n  let dim = texture.width; // == texture.height\n  const buffers = [texture];\n  while (dim > 1) {\n    dim >>= 1;\n    buffers.push(regl.framebuffer({\n      width: dim,\n      height: dim\n    }));\n  }\n\n  return () => {\n    // Render pass: original texture -> half-size fbo -> ... -> 1x1 fbo\n    for (let i = 0; i < buffers.length - 1; i++) {\n      reducePass({\n        inTex: buffers[i],\n        outFbo: buffers[i + 1],\n        rcpDim: 1.0 / (buffers[i].width)\n      });\n    }\n\n    // now retrieve the result from the GPU\n    let result\n    regl({ framebuffer: buffers[buffers.length - 1] })(() => {\n      result = regl.read()[0];\n    });\n    return result;\n  };\n}\n","import React from \"react\";\nimport createRegl from \"regl\";\nimport { useAsyncEffect, fetchShaderText } from \"../common\";\n\nconst SHADER_PATH = {\n  quadVert: \"/particle/quad.vert\",\n  screenFrag: \"/particle/screen.frag\",\n  particleVert: \"/particle/particle.vert\",\n  particleFrag: \"/particle/particle.frag\",\n  updateFrag: \"/particle/update.frag\",\n};\n\n\nconst Particle = () => {\n  const regl = createRegl(); // No arguments: create a full screen canvas\n\n  // ---------- Constants ----------\n  const fadeOpacity = 0.99; // how fast the particle trails fade on each frame\n  const particleRes = 32;\n  const numParticles = particleRes * particleRes;\n  const a_pos = [[0, 0], [1, 0], [0, 1], [0, 1], [1, 0], [1, 1]];\n\n  // ---------- States ----------\n  const screenState = (Array(2)).fill().map(() =>\n    regl.framebuffer({\n      color: regl.texture({ // resized dynamically in regl.frame\n        radius: 1,\n        data: [0, 0, 0, 0]\n      }),\n      depth: false,\n      depthStencil: false\n    })\n  );\n\n  const initialParticleState = Array.from(\n    Array(numParticles * 4),\n    () => Math.floor(Math.random() * 256)\n  );\n\n  const particleState = (Array(2)).fill().map(() =>\n    regl.framebuffer({\n      color: regl.texture({\n        radius: particleRes,\n        data: initialParticleState\n      }),\n      depth: false,\n      depthStencil: false\n    })\n  );\n\n  // ---------- regl commands ----------\n  // Draw faded texture\n  const fadeCommand = (vert, frag) => regl({\n    vert: vert,\n    frag: frag,\n    attributes: {\n      a_pos: a_pos,\n    },\n    uniforms: {\n      u_screen: regl.prop(\"texture\"),\n      u_opacity: regl.prop(\"opacity\"),\n    },\n    count: 6\n  });\n\n  // Draw particle dots to the framebuffer screenState[tick%2]\n  const particleCommand = (vert, frag) => regl({\n    vert: vert,\n    frag: frag,\n    attributes: {\n      a_index: [...Array(numParticles).keys()]\n    },\n    uniforms: {\n      u_particles: regl.prop(\"particle\"),\n      u_particles_res: particleRes,\n    },\n    primitive: \"points\",\n    count: numParticles\n  });\n\n  // Update particle state\n  const updateCommand = (vert, frag) => regl({\n    vert: vert,\n    frag: frag,\n    attributes: {\n      a_pos: a_pos,\n    },\n    uniforms: {\n      u_particles: ({tick}) => particleState[tick % 2]\n    },\n    framebuffer: ({tick}) => particleState[(tick+1) % 2],\n    count: 6\n  });\n\n  // ---------- Draw ----------\n  useAsyncEffect(async () => {\n    // Create regl command with fetched GLSL code\n    const drawFadedTexture = fadeCommand(\n      await fetchShaderText(SHADER_PATH.quadVert),\n      await fetchShaderText(SHADER_PATH.screenFrag),\n    );\n    const drawParticles = particleCommand(\n      await fetchShaderText(SHADER_PATH.particleVert),\n      await fetchShaderText(SHADER_PATH.particleFrag),\n    );\n    const updateParticles = updateCommand(\n      await fetchShaderText(SHADER_PATH.quadVert),\n      await fetchShaderText(SHADER_PATH.updateFrag)\n    );\n\n    regl.frame(({ viewportWidth, viewportHeight, tick }) => {\n      // Resize and clear screen\n      screenState.forEach(screen => {\n        screen.resize(viewportWidth, viewportHeight);\n      });\n\n      screenState[tick % 2].use(() => {\n        regl.clear({ color: [0, 0, 0, 1] });\n        drawFadedTexture({\n          opacity: fadeOpacity,\n          texture: screenState[(tick + 1) % 2]\n        });\n        drawParticles({ particle: particleState[tick % 2] });\n      });\n      // screenState[tick % 2] -> screen\n      drawFadedTexture({ opacity: 1, texture: screenState[tick % 2] });\n\n      // Update states\n      updateParticles(); // particleState: [tick % 2] -> [(tick+1) % 2]\n    });\n\n  }, [], () => { regl.destroy() });\n\n  return <></>;\n};\n\n\nexport default Particle;\n","import React from \"react\";\nimport createRegl from \"regl\";\nimport { useAsyncEffect, fetchShaderText } from \"../common\";\n\nconst SHADER_PATH = {\n  quadVert: \"/kuramoto/quad.vert\",\n  quadFrag: \"/kuramoto/quad.frag\",\n  updateFrag: \"/kuramoto/update.frag\",\n};\n\n\nconst Kuramoto = () => {\n  const regl = createRegl(); // No arguments: create a full screen canvas\n\n  // ---------- Constants ----------\n  const radius = 1024;\n\n  // ---------- States ----------\n  // Only using 8-bits of red\n  const initialState = (Array(radius * radius * 4)).fill(0).map(\n    () => 255 * Math.random()\n  );\n  const state = (Array(2)).fill().map(() =>\n    regl.framebuffer({\n      color: regl.texture({\n        radius: radius,\n        data: initialState\n      }),\n      depth: false,\n      depthStencil: false\n    })\n  );\n\n  // ---------- regl commands ----------\n  const quadCommand = (vert, frag) => regl({\n    vert: vert,\n    frag: frag,\n    attributes: {\n      position: [[0, 0], [1, 0], [0, 1], [0, 1], [1, 0], [1, 1]]\n    },\n    uniforms: {\n      prevState: ({ tick }) => state[tick % 2]\n    },\n    count: 6\n  });\n\n  const updateCommand = (vert, frag) => regl({\n    vert: vert,\n    frag: frag,\n    attributes: {\n      position: [[0, 0], [1, 0], [0, 1], [0, 1], [1, 0], [1, 1]]\n    },\n    uniforms: {\n      radius: radius,\n      prevState: ({ tick }) => state[tick % 2],\n      k: 40, // coupling\n      omega: 10, // Natural frequency. TODO: random\n    },\n    count: 6\n  });\n\n\n  // ---------- Draw ----------\n  useAsyncEffect(async () => {\n    // Create regl command with fetched GLSL code\n    const update = updateCommand(\n      await fetchShaderText(SHADER_PATH.quadVert),\n      await fetchShaderText(SHADER_PATH.updateFrag),\n    );\n    const drawQuad = quadCommand(\n      await fetchShaderText(SHADER_PATH.quadVert),\n      await fetchShaderText(SHADER_PATH.quadFrag),\n    );\n\n    // Animate\n    regl.frame(({ tick }) => {\n      drawQuad();\n      state[(tick + 1) % 2].use(() => {\n        update();\n      });\n    });\n\n  }, [], () => { regl.destroy() });\n\n  return <></>;\n};\n\n\nexport default Kuramoto;\n","import React from \"react\";\nimport createRegl from \"regl\";\nimport { useAsyncEffect, fetchShaderText } from \"../common\";\n\nconst SHADER_PATH = {\n  updateFrag: \"/life/update.frag\",\n  quadVert: \"/life/quad.vert\",\n  quadFrag: \"/life/quad.frag\",\n};\n\n\nconst Life = () => {\n  const regl = createRegl(); // No arguments: create a full screen canvas\n\n  // ---------- Constants ----------\n  const radius = 1024;\n\n  // ---------- States ----------\n  const initialState = (Array(radius * radius * 4)).fill(0).map(\n    () => Math.random() < 0.1 ? 255 : 0\n  );\n  const state = (Array(2)).fill().map(() =>\n    regl.framebuffer({\n      color: regl.texture({\n        radius: radius,\n        data: initialState\n      }),\n      depth: false,\n      depthStencil: false\n    })\n  );\n\n  // ---------- regl commands ----------\n  const updateCommand = (vert, frag) => regl({\n    vert: vert,\n    frag: frag,\n    attributes: {\n      position: [-4, -4, 4, -4, 0, 4]\n    },\n    uniforms: {\n      prevState: ({ tick }) => state[tick % 2],\n      radius: radius\n    },\n    depth: { enable: false },\n    count: 3\n  });\n\n  const quadCommand = (vert, frag) => regl({\n    vert: vert,\n    frag: frag,\n    attributes: {\n      position: [-4, -4, 4, -4, 0, 4]\n    },\n    uniforms: {\n      prevState: ({ tick }) => state[tick % 2]\n    },\n    depth: { enable: false },\n    count: 3\n  });\n\n\n  // ---------- Draw ----------\n  useAsyncEffect(async () => {\n    // Create regl command with fetched GLSL code\n    const updateLife = updateCommand(\n      await fetchShaderText(SHADER_PATH.quadVert),\n      await fetchShaderText(SHADER_PATH.updateFrag),\n    );\n    const drawQuad = quadCommand(\n      await fetchShaderText(SHADER_PATH.quadVert),\n      await fetchShaderText(SHADER_PATH.quadFrag),\n    );\n\n    // Animate\n    regl.frame(({ tick }) => {\n      drawQuad();\n      state[(tick + 1) % 2].use(() => {\n        updateLife();\n      });\n    });\n\n  }, [], () => { regl.destroy() });\n\n  return <></>;\n};\n\n\nexport default Life;\n","import React, { useState } from \"react\";\nimport createRegl from \"regl\";\nimport { gpuReduceCreate, useAsyncEffect } from \"../common\";\n\n\nconst View = () => {\n  const [messages, setMessages] = useState([\"Profiling. wait seconds...\"]);\n\n  // Prepare WebGL environment\n  const canvas = document.body.appendChild(document.createElement(\"canvas\"));\n  canvas.width = 1;\n  canvas.height = 1;\n  const regl = createRegl(canvas);\n\n  // Prepare dummy data\n  const dim = 1024 * 4; // memo: GPU outperforms CPU around 1024\n  const data = [];\n  for (let i = 0; i < dim * dim; i++) {\n    data.push(Math.floor(Math.random() * 255));\n  }\n  // Create texture of data\n  const textureData = [];\n  data.forEach(d => {\n    textureData.push(d, d, d, d); // We must use a texture format of type RGBA\n  });\n  const texture = regl.texture({\n    width: dim,\n    height: dim,\n    data: textureData\n  });\n\n\n  // Start profiling when opened\n  useAsyncEffect(async () => {\n    // Create GPU / CPU reduce function\n    const gpuReduce = gpuReduceCreate(regl, texture, \"max(a, b)\");\n    const cpuReduce = () => {\n      const op = (a, b) => Math.max(a, b);\n      let result = op(data[0], data[1]);\n      for (let i = 2; i < data.length; i++) {\n        result = op(result, data[i]);\n      }\n      return result;\n    };\n\n    const n = 200;\n    [gpuReduce, cpuReduce].forEach((r, j) => {\n      let total = 0;\n      for (let i = 0; i < n; i++) {\n        const t0 = performance.now();\n        const res = r();\n        // console.log(res);\n        const t1 = performance.now();\n        total += (t1 - t0);\n      }\n      const totalStr = Math.round((total / n) * 100) / 100;\n      setMessages(old => [\n        ...old,\n        `[${j === 0 ? \"GPU\" : \"CPU\"}] Finished: Average time=${totalStr} [msec]`\n      ]);\n    });\n  }, []);\n\n\n  return (\n    <div style={{padding: \"10px\"}}>\n      <h3>Reduction algorithm with WebGL</h3>\n      <p>\n        Based on regl official example <br />\n        https://github.com/regl-project/regl/blob/gh-pages/example/reduction.js\n      </p>\n      {messages.map((m, i) => <p key={i}>{m}</p>)}\n    </div>\n  );\n};\n\n\nexport default View;\n","import React from \"react\";\nimport createRegl from \"regl\";\nimport { useAsyncEffect, fetchShaderText, loadImage } from \"../common\";\nimport starryNight from \"../resources/starry_night.jpg\";\n\nconst SHADER_PATH = {\n  quadVert: \"/vector_field/quad.vert\",\n  vectorFrag: \"/vector_field/vector.frag\",\n};\n\n\nconst VectorField = () => {\n  const regl = createRegl(); // No arguments: create a full screen canvas\n\n  // ---------- regl commands ----------\n  const draw = regl({\n    vert: regl.prop(\"vert\"),\n    frag: regl.prop(\"frag\"),\n    attributes: {\n      position: [[0, 0], [1, 0], [0, 1], [0, 1], [1, 0], [1, 1]],\n    },\n    uniforms: {\n      texture: regl.prop(\"texture\"),\n      width: regl.prop(\"width\"),\n      height: regl.prop(\"height\"),\n      time: regl.prop(\"time\"),\n    },\n    count: 6\n  });\n\n  // ---------- Draw ----------\n  useAsyncEffect(async () => {\n    const vert = await fetchShaderText(SHADER_PATH.quadVert);\n    const frag = await fetchShaderText(SHADER_PATH.vectorFrag);\n    const bitmap = await loadImage(starryNight);\n    const texture = regl.texture(bitmap);\n\n    regl.frame(({ time }) => {\n      draw({\n        vert: vert,\n        frag: frag,\n        texture: texture,\n        width: bitmap.width,\n        height: bitmap.height,\n        time: time,\n      });\n    });\n  }, [], () => { regl.destroy() });\n\n  return <></>;\n};\n\n\nexport default VectorField;\n","import React from \"react\";\nimport { HashRouter as Router, Route, Link } from \"react-router-dom\";\nimport Sample from  \"./views/Sample\";\nimport Particle from \"./views/Particle\";\nimport Kuramoto from \"./views/Kuramoto\";\nimport Life from \"./views/Life\";\nimport Reduce from \"./views/ReduceSample\";\nimport VectorField from \"./views/VectorField\";\n\n\nconst App = () => (\n  <div>\n    <ul>\n      <li>\n        <Link to=\"/\">Home</Link>\n      </li>\n      <li>\n        <Link to=\"/sample\">Sample</Link>\n      </li>\n      <li>\n        <Link to=\"/particle\">Particle</Link>\n      </li>\n      <li>\n        <Link to=\"/kuramoto\">Kuramoto</Link>\n      </li>\n      <li>\n        <Link to=\"/life\">Life</Link>\n      </li>\n      <li>\n        <Link to=\"/reduce\">Reduce</Link>\n      </li>\n      <li>\n        <Link to=\"/vector_field\">VectorField</Link>\n      </li>\n    </ul>\n  </div>\n);\n\n\nconst AppRouter = () => (\n  <Router>\n    <div>\n      <Route path=\"/\" exact component={App} />\n      <Route path=\"/sample\" component={Sample} />\n      <Route path=\"/particle\" component={Particle} />\n      <Route path=\"/kuramoto\" component={Kuramoto} />\n      <Route path=\"/life\" component={Life} />\n      <Route path=\"/reduce\" component={Reduce} />\n      <Route path=\"/vector_field\" component={VectorField} />\n    </div>\n  </Router>\n);\n\n\nexport default AppRouter;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}